# Introduction

This is a readme on how to use the AI-control problem simulation tools in this project. The base for the algorithm is the Avida Artificial Life simulator (https://github.com/devosoft/avida), upon which we have made some modifications and additions.
This code is the product of the Masters Thesis "AI Alignment with Artificial Life" by Richard Martin and Tomas Lundberg done for Torbjörn Lundh at the Institution of Mathematical Sciences at Chalmers University of Technology in 2021.
It is an "evolutionary simulation of evolutionary simulations" where control systems of stochastic algorithms can be studied by another stochastic algorithm.
For more information on the project, refer to the thesis at Chalmers publications or at {arxiv-länk}.


# Prerequisites

MPI (message passing interface) is more or less required for efficient performance. The code is designed with OpenMPI.
The program is computationally expensive and requires fast hardware. Optimally you will want to use a computing cluster.



# Installation

## With OpenMPI
After cloning this repo, follow the instructions on how to build Avida from the official Avida repo: https://github.com/devosoft/avida/blob/master/README
Note: The build will initially fail because no MPI compiler is set as standard. Therefore, when the build fails do the following steps:
1. find the path to your MPI compiler by typing "whereis mpic++" (Depending on your system, you might have to load it as a module)
2. go into the directory cbuild created in the build process
3. typ "ccmake ../"
4. typ "t" and find the line named CMAKE_CXX_COMPILER and enter the path to the MPI compiler
5. type "c" to configure, then follow the instructions and then type "g" to generate.
6. go back to the AvidaAGI repo folder and type ./build_avida
7. Copy the file metaconfig.ini from the AvidaAGI repo folder to ./cbuild/work


# Configuring Avida and Avida-AGI experiments

All settings files are located in the ./cbuild/work folder by default (created in build process).
The Avida configurations and functionality is mostly untouched. So for the setup of the Avida environments, see the Avida instruction manual.
Most of the configurations for Avida-AGI can be set in Metaconfig.ini. It has different sections with explanatory comments.
AGI instructions are located in the instset-heads.cfg file together with standard Avida instructions. Uncomment them to activate.
Active tasks can be controlled by commenting/uncommenting them in environment.cfg.
The file chromosomes.csv is an example of a preconfigured set of chromosomes/strategies. A file of this kind is required to run in "exhaustive" mode, that is: with "pre_population = true" in Metaconfig.ini.


# Running simulations

Avida-AGI is run by executing the file avida in the ./cbuild/work folder. It takes three optional arguments:
n: the number of world to generate each generation
m: the number of meta generations to run
u: the number of updates each simulation should run
It is also possible to give the standard Avida arguments along with these three arguments. See the Avida documentation for info on possible arguments.
Example execution: ./avida -n50 -m25 -u10000

## Note on MPI
Running with MPI is strongly recommended. The syntax then becomes:
mpirun -np X ./avida  -n50 -m25 -u10000
where X is the number of processes you want to use.
If you specify X > n, Avida-AGI will use those "extra" processes to take averages over avida worlds. i.e. it will repeat each simulation X/n times and then compute the average controller fitness from those samples.
If you specify X < n, Avida-AGI will instead run several worlds per process in a sequential fashion.

Note that the optional arguments to Avida-AGI can be set in the Metaconfig.ini instead of being supplid on the command-line. If they are supplied on the commnad-line, those values will overwrite whatever is in the Metaconfig.ini.

Arguments to pass to the Avida software can be added on the commandline after any Avida-AGI arguments.


# Analyzing results

There is a jupyter notebook called AGIworkbook.ipynb that contains a bunch of functions and scripts to read, analyze and visualize the results generated by Avida-AGI.




